{
  "openapi": "3.0.0",
  "info": {
    "title": "Gamified Volunteering API",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new account",
        "description": "Creates a user with **username, email, password**.  \nOptionally send a verification email before enabling sensitive actions.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registered successfully",
            "headers": {
              "Set-Cookie": {
                "description": "HttpOnly refresh token cookie"
              },
              "schema": {
                "type": "string",
                "example": "refresh_token=eyJhbGciOi...; HttpOnly; Secure; SameSite=Strict; Path=/v1/auth/refresh"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                },
                "examples": {
                  "success": {
                    "value": {
                      "access_token": "eyJhbGciOi...",
                      "user": {
                        "id": "vol_123",
                        "username": "alex",
                        "role": "VOLUNTEER"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input (e.g., weak password, bad email)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Username or email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login with email and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials or unverified email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "headers": {
            "Set-Cookie": {
              "description": "HttpOnly refresh token cookie",
              "schema": {
                "type": "string",
                "example": "refresh_token=eyJhbGciOi...; HttpOnly; Secure; SameSite=Strict; Path=/v1/auth/refresh"
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh access token using a refresh token",
        "parameters": [
          {
            "in": "cookie",
            "name": "refresh_token",
            "required": true,
            "schema": {
              "type": "string",
              "description": "HttpOnly cookie containing the refresh token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New access token (and new refresh cookie)",
            "headers": {
              "Set-Cookie": {
                "description": "New HttpOnly refresh token cookie",
                "schema": {
                  "type": "string",
                  "example": "refresh_token=...; HttpOnly; Secure; SameSite=Strict; Path=/v1/auth/refresh"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid/expired refresh token or reuse detected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout (revoke current refresh token)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Logged out (no content)"
          },
          "401": {
            "description": "Missing or invalid access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "List events",
        "description": "Returns all available volunteer events, optionally filtered by date or location.",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Only include events starting after this date."
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Only include events starting before this date."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of events.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "UserPublic": {
        "type": "object",
        "required": [
          "id",
          "username",
          "role"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "vol_123"
          },
          "username": {
            "type": "string",
            "example": "alex"
          },
          "role": {
            "type": "string",
            "example": "VOLUNTEER"
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "username",
          "email",
          "password",
          "role"
        ],
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 32,
            "example": "Noah123"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "Noah@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "Min 8 chars. Recommend letters, numbers, symbols.",
            "example": "StrongPassword123!"
          },
          "role": {
            "type": "string",
            "enum": [
              "Volunteer",
              "Organization"
            ],
            "example": "Volunteer"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "Noah@example.com"
          },
          "password": {
            "type": "string",
            "example": "HiddenPassword123!"
          }
        }
      },
      "RefreshResponse": {
        "type": "object",
        "required": [
          "access_token"
        ],
        "properties": {
          "access_token": {
            "type": "string",
            "description": "New JWT, ~15 minutes"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "required": [
          "access_token",
          "user"
        ],
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT, ~15 minutes"
          },
          "user": {
            "$ref": "#/components/schemas/UserPublic"
          }
        }
      },
      "TokenErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid or expired token"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid credentials"
          }
        }
      },
      "Event": {
        "type": "object",
        "required": [
          "id",
          "name",
          "starts_at",
          "ends_at",
          "location",
          "verifier"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_001"
          },
          "name": {
            "type": "string",
            "example": "Downtown Park Cleanup"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-10-18T09:00:00Z"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-10-18T12:00:00Z"
          },
          "location": {
            "type": "object",
            "properties": {
              "lat": {
                "type": "number",
                "example": 49.2827
              },
              "lon": {
                "type": "number",
                "example": -123.1207
              }
            }
          },
          "verifier": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "org_12"
              },
              "name": {
                "type": "string",
                "example": "Vancouver Cleanups"
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication & session endpoints"
    },
    {
      "name": "Events",
      "description": "Volunteer event management & search"
    }
  ]
}